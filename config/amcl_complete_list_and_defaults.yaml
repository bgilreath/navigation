#Minimum allowed number of particles.
#range: 0 to 1000
min_particles: 100
#Maximum allowed number of particles.
#range: 0 to 10000
max_particles: 5000

#Maximum error between the true distribution and the estimated distribution.
#range: 0 to 1
kld_err: 0.01
#Upper standard normal quantile for (1 - p), where p is the probability that the error on the estimated distrubition will be less than kld_err.
#range: 0 to 1
kld_z: 0.99

#Translational movement required before performing a filter update.
#range: 0 to 5
update_min_d: 0.2
#Rotational movement required before performing a filter update.
#range: 0 to 2*pi
update_min_a: pi/6

#Number of filter updates required before resampling.
#range: 0 to 20
resample_interval: 2

#Time with which to post-date the transform that is published, to indicate that this transform is valid into the future.
#range: 0 to 2
transform_tolerance: 0.1

#Exponential decay rate for the slow average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.001.
#range: 0 to 0.5
recovery_alpha_slow: 0
#Exponential decay rate for the fast average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.1.
#range: 0 to 1
recovery_alpha_fast: 0

#When true skips laser scans when a scan doesnt work for a majority of particles
#range: True to False 
do_beamskip: false
#Distance from a valid map point before scan is considered invalid
#range: 0 to 2
beam_skip_distance: 0.5
#Ratio of samples for which the scans are valid to consider as valid scan
#range: 0 to 1
beam_skip_threshold: 0.3

#When true (the default), publish results via TF.  When false, do not.
#range: True to False
tf_broadcast: true
#Maximum rate (Hz) at which scans and paths are published for visualization, -1.0 to disable.
#range: -1 to 100
gui_publish_rate: -1
#Maximum rate (Hz) at which to store the last estimated pose and covariance to the parameter server, in the variables ~initial_pose_* and ~initial_cov_*. 
#This saved pose will be used on subsequent runs to initialize the filter. -1.0 to disable.
#range: -1 to 10
save_pose_rate: 0.5

#When set to true, AMCL will subscribe to the map topic rather than making a service call to receive its map.
#range: True to False
use_map_topic: false
#When set to true, AMCL will only use the first map it subscribes to, rather than updating each time a new one is received.
#range: True to False 
first_map_only: false

#Minimum scan range to be considered; -1.0 will cause the laser's reported minimum range to be used.
#range: -1 to 1000
laser_min_range: -1
#Maximum scan range to be considered; -1.0 will cause the laser's reported maximum range to be used.
#range: -1 to 1000
laser_max_range: -1

#How many evenly-spaced beams in each scan to be used when updating the filter.
#range: 0 to 250
laser_max_beams: 30

#Mixture weight for the z_hit part of the model.
#range: 0 to 1
laser_z_hit: .95
#Mixture weight for the z_short part of the model.
#range: 0 to 1
laser_z_short: .1
#Mixture weight for the z_max part of the model.
#range: 0 to 1
laser_z_max: .05
#Mixture weight for the z_rand part of the model.
#range: 0 to 1
laser_z_rand: .05

#Standard deviation for Gaussian model used in z_hit part of the model.
#range: 0 to 10
laser_sigma_hit: .2
#Exponential decay parameter for z_short part of model.
#range: 0 to 10
laser_lambda_short: 0.1
#Maximum distance to do obstacle inflation on map, for use in likelihood_field model.
#range: 0 to 20
laser_likelihood_max_dist: 2

#lmt = gen.enum([
#  gen.const("beam_const", str_t, "beam", "Use beam laser model"), 
#  gen.const("likelihood_field_const", str_t, "likelihood_field", "Use likelihood_field laser model"), 
#  gen.const("likelihood_field_prob", str_t, "likelihood_field_prob", "Use likelihood_field_prob laser model"
#  )], "Laser Models")
#Which model to use, either beam, likelihood_field or likelihood_field_prob.
#range: 
laser_model_type: "likelihood_field"
#, edit_method=lmt)

#odt = gen.enum([gen.const("diff_const", str_t, "diff", "Use diff odom model"),
#                gen.const("omni_const", str_t, "omni", "Use omni odom model"),
#                gen.const("diff_corrected_const", str_t, "diff-corrected", "Use corrected diff odom model"),
#                gen.const("omni_corrected_const", str_t, "omni-corrected", "Use corrected omni odom model")],
#               "Odom Models")
#Which model to use, diff, omni, diff-corrected, or omni-corrected
#range: 
odom_model_type: "diff"
#, edit_method=odt)

#Specifies the expected noise in odometry's rotation estimate from the rotational component of the robot's motion.
#range: 0 to 10
odom_alpha1: 0.2
#Specifies the expected noise in odometry's rotation estimate from the translational component of the robot's motion.
#range: 0 to 10
odom_alpha2: 0.2
#Specifies the expected noise in odometry's translation estimate from the translational component of the robot's motion.
#range: 0 to 10
odom_alpha3: 0.2
#Specifies the expected noise in odometry's translation  estimate from the rotational component of the robot's motion.
#range: 0 to 10
odom_alpha4: 0.2
#Translation-related noise parameter (only used if model is omni).
#range: 0 to 10
odom_alpha5: 0.2

#Which frame to use for odometry.
odom_frame_id: "odom"
#Which frame to use for the robot base.
base_frame_id: "base_link"
#The name of the coordinate frame published by the localization system.
global_frame_id: "map"

#Restore the default configuration
#range: True to False
restore_defaults: false





